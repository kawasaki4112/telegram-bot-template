from typing import Any, Sequence, Callable, TypeVar, Optional
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.data.repositories.category_repository import category_crud
from src.data.repositories.product_repository import product_crud

T = TypeVar("T")


async def yes_no_kb(action:str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text='‚úÖ –î–∞', callback_data=f'yes:{action}'),
        InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data=f'no:{action}')
    )
    return builder.as_markup()

async def buy_item_kb(item_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞.
    - item_id: ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è callback_data.
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å', callback_data=f'buy:{item_id}'),
        InlineKeyboardButton(text='üì¶ –í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_to_cart:{item_id}'),
        InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel')
    )
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

async def menu_builder_kb(
    items: Sequence[T],
    page: int = 0,
    *,
    prefix: str,
    text_func: Callable[[T], str],
    id_func: Callable[[T], Any],
    back_callback: Optional[str] = None,      # callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–Ω–∞–∑–∞–¥¬ª
) -> InlineKeyboardMarkup:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–∏–ª–¥–µ—Ä –º–µ–Ω—é —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    - items: —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    - page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (0-based).
    - prefix: –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data, –Ω–∞–ø—Ä. "category" –∏–ª–∏ "product".
    - text_func: –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞.
    - id_func: –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å id –¥–ª—è callback_data –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞.
    - back_callback: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–Ω–∞–∑–∞–¥¬ª (None ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å).
    - back_text: —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ ¬´–Ω–∞–∑–∞–¥¬ª.
    """
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
    for item in items:
        text = text_func(item)
        _id  = id_func(item)
        cb   = f"{prefix}:{_id}:{page}"
        builder.row(InlineKeyboardButton(text=text, callback_data=cb))

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    prev_page = max(0, page - 1)
    next_page = page + 1
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", 
            callback_data=f"{prefix}_page:{prev_page}"
        ),
        InlineKeyboardButton(
            text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", 
            callback_data=f"{prefix}_page:{next_page}"
        )
    )

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if back_callback:
        builder.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
        )

    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
